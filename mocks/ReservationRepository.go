// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	reservation "github.com/GP-3-Kelompok-2/airbnb-app-project/features/reservation"
	mock "github.com/stretchr/testify/mock"
)

// ReservationRepository is an autogenerated mock type for the RepositoryInterface type
type ReservationRepository struct {
	mock.Mock
}

// CheckAvailability provides a mock function with given fields: input
func (_m *ReservationRepository) CheckAvailability(input reservation.ReservationCore) (reservation.Homestay, error) {
	ret := _m.Called(input)

	var r0 reservation.Homestay
	if rf, ok := ret.Get(0).(func(reservation.ReservationCore) reservation.Homestay); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(reservation.Homestay)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservation.ReservationCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: input
func (_m *ReservationRepository) CreatePayment(input reservation.ReservationCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(reservation.ReservationCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistory provides a mock function with given fields: UserId
func (_m *ReservationRepository) GetHistory(UserId uint) ([]reservation.ReservationCore, error) {
	ret := _m.Called(UserId)

	var r0 []reservation.ReservationCore
	if rf, ok := ret.Get(0).(func(uint) []reservation.ReservationCore); ok {
		r0 = rf(UserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservation.ReservationCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(UserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationRepository creates a new instance of ReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationRepository(t mockConstructorTestingTNewReservationRepository) *ReservationRepository {
	mock := &ReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
